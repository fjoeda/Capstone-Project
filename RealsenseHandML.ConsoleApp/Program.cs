// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using RealsenseHandML.Model;

namespace RealsenseHandML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"D:\Riset\RealsenseHand\Rock paper scisors dataset.csv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            ModelOutput predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Label with predicted Label from sample data...\n\n");
            Console.WriteLine($"R_Thumb_flexion: {sampleData.R_Thumb_flexion}");
            Console.WriteLine($"R_Rot_Thumb_tip_w: {sampleData.R_Rot_Thumb_tip_w}");
            Console.WriteLine($"R_Rot_Thumb_tip_x: {sampleData.R_Rot_Thumb_tip_x}");
            Console.WriteLine($"R_Rot_Thumb_tip_y: {sampleData.R_Rot_Thumb_tip_y}");
            Console.WriteLine($"R_Rot_Thumb_tip_z: {sampleData.R_Rot_Thumb_tip_z}");
            Console.WriteLine($"R_Rot_Thumb_jt2_w: {sampleData.R_Rot_Thumb_jt2_w}");
            Console.WriteLine($"R_Rot_Thumb_jt2_x: {sampleData.R_Rot_Thumb_jt2_x}");
            Console.WriteLine($"R_Rot_Thumb_jt2_y: {sampleData.R_Rot_Thumb_jt2_y}");
            Console.WriteLine($"R_Rot_Thumb_jt2_z: {sampleData.R_Rot_Thumb_jt2_z}");
            Console.WriteLine($"R_Rot_Thumb_jt1_w: {sampleData.R_Rot_Thumb_jt1_w}");
            Console.WriteLine($"R_Rot_Thumb_jt1_x: {sampleData.R_Rot_Thumb_jt1_x}");
            Console.WriteLine($"R_Rot_Thumb_jt1_y: {sampleData.R_Rot_Thumb_jt1_y}");
            Console.WriteLine($"R_Rot_Thumb_jt1_z: {sampleData.R_Rot_Thumb_jt1_z}");
            Console.WriteLine($"R_Rot_Thumb_base_w: {sampleData.R_Rot_Thumb_base_w}");
            Console.WriteLine($"R_Rot_Thumb_base_x: {sampleData.R_Rot_Thumb_base_x}");
            Console.WriteLine($"R_Rot_Thumb_base_y: {sampleData.R_Rot_Thumb_base_y}");
            Console.WriteLine($"R_Rot_Thumb_base_z: {sampleData.R_Rot_Thumb_base_z}");
            Console.WriteLine($"R_Index_flexion: {sampleData.R_Index_flexion}");
            Console.WriteLine($"R_Rot_Index_tip_w: {sampleData.R_Rot_Index_tip_w}");
            Console.WriteLine($"R_Rot_Index_tip_x: {sampleData.R_Rot_Index_tip_x}");
            Console.WriteLine($"R_Rot_Index_tip_y: {sampleData.R_Rot_Index_tip_y}");
            Console.WriteLine($"R_Rot_Index_tip_z: {sampleData.R_Rot_Index_tip_z}");
            Console.WriteLine($"R_Rot_Index_jt2_w: {sampleData.R_Rot_Index_jt2_w}");
            Console.WriteLine($"R_Rot_Index_jt2_x: {sampleData.R_Rot_Index_jt2_x}");
            Console.WriteLine($"R_Rot_Index_jt2_y: {sampleData.R_Rot_Index_jt2_y}");
            Console.WriteLine($"R_Rot_Index_jt2_z: {sampleData.R_Rot_Index_jt2_z}");
            Console.WriteLine($"R_Rot_Index_jt1_w: {sampleData.R_Rot_Index_jt1_w}");
            Console.WriteLine($"R_Rot_Index_jt1_x: {sampleData.R_Rot_Index_jt1_x}");
            Console.WriteLine($"R_Rot_Index_jt1_y: {sampleData.R_Rot_Index_jt1_y}");
            Console.WriteLine($"R_Rot_Index_jt1_z: {sampleData.R_Rot_Index_jt1_z}");
            Console.WriteLine($"R_Rot_Index_base_w: {sampleData.R_Rot_Index_base_w}");
            Console.WriteLine($"R_Rot_Index_base_x: {sampleData.R_Rot_Index_base_x}");
            Console.WriteLine($"R_Rot_Index_base_y: {sampleData.R_Rot_Index_base_y}");
            Console.WriteLine($"R_Rot_Index_base_z: {sampleData.R_Rot_Index_base_z}");
            Console.WriteLine($"R_Middle_flexion: {sampleData.R_Middle_flexion}");
            Console.WriteLine($"R_Rot_Middle_tip_w: {sampleData.R_Rot_Middle_tip_w}");
            Console.WriteLine($"R_Rot_Middle_tip_x: {sampleData.R_Rot_Middle_tip_x}");
            Console.WriteLine($"R_Rot_Middle_tip_y: {sampleData.R_Rot_Middle_tip_y}");
            Console.WriteLine($"R_Rot_Middle_tip_z: {sampleData.R_Rot_Middle_tip_z}");
            Console.WriteLine($"R_Rot_Middle_jt2_w: {sampleData.R_Rot_Middle_jt2_w}");
            Console.WriteLine($"R_Rot_Middle_jt2_x: {sampleData.R_Rot_Middle_jt2_x}");
            Console.WriteLine($"R_Rot_Middle_jt2_y: {sampleData.R_Rot_Middle_jt2_y}");
            Console.WriteLine($"R_Rot_Middle_jt2_z: {sampleData.R_Rot_Middle_jt2_z}");
            Console.WriteLine($"R_Rot_Middle_jt1_w: {sampleData.R_Rot_Middle_jt1_w}");
            Console.WriteLine($"R_Rot_Middle_jt1_x: {sampleData.R_Rot_Middle_jt1_x}");
            Console.WriteLine($"R_Rot_Middle_jt1_y: {sampleData.R_Rot_Middle_jt1_y}");
            Console.WriteLine($"R_Rot_Middle_jt1_z: {sampleData.R_Rot_Middle_jt1_z}");
            Console.WriteLine($"R_Rot_Middle_base_w: {sampleData.R_Rot_Middle_base_w}");
            Console.WriteLine($"R_Rot_Middle_base_x: {sampleData.R_Rot_Middle_base_x}");
            Console.WriteLine($"R_Rot_Middle_base_y: {sampleData.R_Rot_Middle_base_y}");
            Console.WriteLine($"R_Rot_Middle_base_z: {sampleData.R_Rot_Middle_base_z}");
            Console.WriteLine($"R_Ring_flexion: {sampleData.R_Ring_flexion}");
            Console.WriteLine($"R_Rot_Ring_tip_w: {sampleData.R_Rot_Ring_tip_w}");
            Console.WriteLine($"R_Rot_Ring_tip_x: {sampleData.R_Rot_Ring_tip_x}");
            Console.WriteLine($"R_Rot_Ring_tip_y: {sampleData.R_Rot_Ring_tip_y}");
            Console.WriteLine($"R_Rot_Ring_tip_z: {sampleData.R_Rot_Ring_tip_z}");
            Console.WriteLine($"R_Rot_Ring_jt2_w: {sampleData.R_Rot_Ring_jt2_w}");
            Console.WriteLine($"R_Rot_Ring_jt2_x: {sampleData.R_Rot_Ring_jt2_x}");
            Console.WriteLine($"R_Rot_Ring_jt2_y: {sampleData.R_Rot_Ring_jt2_y}");
            Console.WriteLine($"R_Rot_Ring_jt2_z: {sampleData.R_Rot_Ring_jt2_z}");
            Console.WriteLine($"R_Rot_Ring_jt1_w: {sampleData.R_Rot_Ring_jt1_w}");
            Console.WriteLine($"R_Rot_Ring_jt1_x: {sampleData.R_Rot_Ring_jt1_x}");
            Console.WriteLine($"R_Rot_Ring_jt1_y: {sampleData.R_Rot_Ring_jt1_y}");
            Console.WriteLine($"R_Rot_Ring_jt1_z: {sampleData.R_Rot_Ring_jt1_z}");
            Console.WriteLine($"R_Rot_Ring_base_w: {sampleData.R_Rot_Ring_base_w}");
            Console.WriteLine($"R_Rot_Ring_base_x: {sampleData.R_Rot_Ring_base_x}");
            Console.WriteLine($"R_Rot_Ring_base_y: {sampleData.R_Rot_Ring_base_y}");
            Console.WriteLine($"R_Rot_Ring_base_z: {sampleData.R_Rot_Ring_base_z}");
            Console.WriteLine($"R_Pingky_flexion: {sampleData.R_Pingky_flexion}");
            Console.WriteLine($"R_Rot_Pingky_tip_w: {sampleData.R_Rot_Pingky_tip_w}");
            Console.WriteLine($"R_Rot_Pingky_tip_x: {sampleData.R_Rot_Pingky_tip_x}");
            Console.WriteLine($"R_Rot_Pingky_tip_y: {sampleData.R_Rot_Pingky_tip_y}");
            Console.WriteLine($"R_Rot_Pingky_tip_z: {sampleData.R_Rot_Pingky_tip_z}");
            Console.WriteLine($"R_Rot_Pingky_jt2_w: {sampleData.R_Rot_Pingky_jt2_w}");
            Console.WriteLine($"R_Rot_Pingky_jt2_x: {sampleData.R_Rot_Pingky_jt2_x}");
            Console.WriteLine($"R_Rot_Pingky_jt2_y: {sampleData.R_Rot_Pingky_jt2_y}");
            Console.WriteLine($"R_Rot_Pingky_jt2_z: {sampleData.R_Rot_Pingky_jt2_z}");
            Console.WriteLine($"R_Rot_Pingky_jt1_w: {sampleData.R_Rot_Pingky_jt1_w}");
            Console.WriteLine($"R_Rot_Pingky_jt1_x: {sampleData.R_Rot_Pingky_jt1_x}");
            Console.WriteLine($"R_Rot_Pingky_jt1_y: {sampleData.R_Rot_Pingky_jt1_y}");
            Console.WriteLine($"R_Rot_Pingky_jt1_z: {sampleData.R_Rot_Pingky_jt1_z}");
            Console.WriteLine($"R_Rot_Pingky_base_w: {sampleData.R_Rot_Pingky_base_w}");
            Console.WriteLine($"R_Rot_Pingky_base_x: {sampleData.R_Rot_Pingky_base_x}");
            Console.WriteLine($"R_Rot_Pingky_base_y: {sampleData.R_Rot_Pingky_base_y}");
            Console.WriteLine($"R_Rot_Pingky_base_z: {sampleData.R_Rot_Pingky_base_z}");
            Console.WriteLine($"L_Thumb_flexion: {sampleData.L_Thumb_flexion}");
            Console.WriteLine($"L_Rot_Thumb_tip_w: {sampleData.L_Rot_Thumb_tip_w}");
            Console.WriteLine($"L_Rot_Thumb_tip_x: {sampleData.L_Rot_Thumb_tip_x}");
            Console.WriteLine($"L_Rot_Thumb_tip_y: {sampleData.L_Rot_Thumb_tip_y}");
            Console.WriteLine($"L_Rot_Thumb_tip_z: {sampleData.L_Rot_Thumb_tip_z}");
            Console.WriteLine($"L_Rot_Thumb_jt2_w: {sampleData.L_Rot_Thumb_jt2_w}");
            Console.WriteLine($"L_Rot_Thumb_jt2_x: {sampleData.L_Rot_Thumb_jt2_x}");
            Console.WriteLine($"L_Rot_Thumb_jt2_y: {sampleData.L_Rot_Thumb_jt2_y}");
            Console.WriteLine($"L_Rot_Thumb_jt2_z: {sampleData.L_Rot_Thumb_jt2_z}");
            Console.WriteLine($"L_Rot_Thumb_jt1_w: {sampleData.L_Rot_Thumb_jt1_w}");
            Console.WriteLine($"L_Rot_Thumb_jt1_x: {sampleData.L_Rot_Thumb_jt1_x}");
            Console.WriteLine($"L_Rot_Thumb_jt1_y: {sampleData.L_Rot_Thumb_jt1_y}");
            Console.WriteLine($"L_Rot_Thumb_jt1_z: {sampleData.L_Rot_Thumb_jt1_z}");
            Console.WriteLine($"L_Rot_Thumb_base_w: {sampleData.L_Rot_Thumb_base_w}");
            Console.WriteLine($"L_Rot_Thumb_base_x: {sampleData.L_Rot_Thumb_base_x}");
            Console.WriteLine($"L_Rot_Thumb_base_y: {sampleData.L_Rot_Thumb_base_y}");
            Console.WriteLine($"L_Rot_Thumb_base_z: {sampleData.L_Rot_Thumb_base_z}");
            Console.WriteLine($"L_Index_flexion: {sampleData.L_Index_flexion}");
            Console.WriteLine($"L_Rot_Index_tip_w: {sampleData.L_Rot_Index_tip_w}");
            Console.WriteLine($"L_Rot_Index_tip_x: {sampleData.L_Rot_Index_tip_x}");
            Console.WriteLine($"L_Rot_Index_tip_y: {sampleData.L_Rot_Index_tip_y}");
            Console.WriteLine($"L_Rot_Index_tip_z: {sampleData.L_Rot_Index_tip_z}");
            Console.WriteLine($"L_Rot_Index_jt2_w: {sampleData.L_Rot_Index_jt2_w}");
            Console.WriteLine($"L_Rot_Index_jt2_x: {sampleData.L_Rot_Index_jt2_x}");
            Console.WriteLine($"L_Rot_Index_jt2_y: {sampleData.L_Rot_Index_jt2_y}");
            Console.WriteLine($"L_Rot_Index_jt2_z: {sampleData.L_Rot_Index_jt2_z}");
            Console.WriteLine($"L_Rot_Index_jt1_w: {sampleData.L_Rot_Index_jt1_w}");
            Console.WriteLine($"L_Rot_Index_jt1_x: {sampleData.L_Rot_Index_jt1_x}");
            Console.WriteLine($"L_Rot_Index_jt1_y: {sampleData.L_Rot_Index_jt1_y}");
            Console.WriteLine($"L_Rot_Index_jt1_z: {sampleData.L_Rot_Index_jt1_z}");
            Console.WriteLine($"L_Rot_Index_base_w: {sampleData.L_Rot_Index_base_w}");
            Console.WriteLine($"L_Rot_Index_base_x: {sampleData.L_Rot_Index_base_x}");
            Console.WriteLine($"L_Rot_Index_base_y: {sampleData.L_Rot_Index_base_y}");
            Console.WriteLine($"L_Rot_Index_base_z: {sampleData.L_Rot_Index_base_z}");
            Console.WriteLine($"L_Middle_flexion: {sampleData.L_Middle_flexion}");
            Console.WriteLine($"L_Rot_Middle_tip_w: {sampleData.L_Rot_Middle_tip_w}");
            Console.WriteLine($"L_Rot_Middle_tip_x: {sampleData.L_Rot_Middle_tip_x}");
            Console.WriteLine($"L_Rot_Middle_tip_y: {sampleData.L_Rot_Middle_tip_y}");
            Console.WriteLine($"L_Rot_Middle_tip_z: {sampleData.L_Rot_Middle_tip_z}");
            Console.WriteLine($"L_Rot_Middle_jt2_w: {sampleData.L_Rot_Middle_jt2_w}");
            Console.WriteLine($"L_Rot_Middle_jt2_x: {sampleData.L_Rot_Middle_jt2_x}");
            Console.WriteLine($"L_Rot_Middle_jt2_y: {sampleData.L_Rot_Middle_jt2_y}");
            Console.WriteLine($"L_Rot_Middle_jt2_z: {sampleData.L_Rot_Middle_jt2_z}");
            Console.WriteLine($"L_Rot_Middle_jt1_w: {sampleData.L_Rot_Middle_jt1_w}");
            Console.WriteLine($"L_Rot_Middle_jt1_x: {sampleData.L_Rot_Middle_jt1_x}");
            Console.WriteLine($"L_Rot_Middle_jt1_y: {sampleData.L_Rot_Middle_jt1_y}");
            Console.WriteLine($"L_Rot_Middle_jt1_z: {sampleData.L_Rot_Middle_jt1_z}");
            Console.WriteLine($"L_Rot_Middle_base_w: {sampleData.L_Rot_Middle_base_w}");
            Console.WriteLine($"L_Rot_Middle_base_x: {sampleData.L_Rot_Middle_base_x}");
            Console.WriteLine($"L_Rot_Middle_base_y: {sampleData.L_Rot_Middle_base_y}");
            Console.WriteLine($"L_Rot_Middle_base_z: {sampleData.L_Rot_Middle_base_z}");
            Console.WriteLine($"L_Ring_flexion: {sampleData.L_Ring_flexion}");
            Console.WriteLine($"L_Rot_Ring_tip_w: {sampleData.L_Rot_Ring_tip_w}");
            Console.WriteLine($"L_Rot_Ring_tip_x: {sampleData.L_Rot_Ring_tip_x}");
            Console.WriteLine($"L_Rot_Ring_tip_y: {sampleData.L_Rot_Ring_tip_y}");
            Console.WriteLine($"L_Rot_Ring_tip_z: {sampleData.L_Rot_Ring_tip_z}");
            Console.WriteLine($"L_Rot_Ring_jt2_w: {sampleData.L_Rot_Ring_jt2_w}");
            Console.WriteLine($"L_Rot_Ring_jt2_x: {sampleData.L_Rot_Ring_jt2_x}");
            Console.WriteLine($"L_Rot_Ring_jt2_y: {sampleData.L_Rot_Ring_jt2_y}");
            Console.WriteLine($"L_Rot_Ring_jt2_z: {sampleData.L_Rot_Ring_jt2_z}");
            Console.WriteLine($"L_Rot_Ring_jt1_w: {sampleData.L_Rot_Ring_jt1_w}");
            Console.WriteLine($"L_Rot_Ring_jt1_x: {sampleData.L_Rot_Ring_jt1_x}");
            Console.WriteLine($"L_Rot_Ring_jt1_y: {sampleData.L_Rot_Ring_jt1_y}");
            Console.WriteLine($"L_Rot_Ring_jt1_z: {sampleData.L_Rot_Ring_jt1_z}");
            Console.WriteLine($"L_Rot_Ring_base_w: {sampleData.L_Rot_Ring_base_w}");
            Console.WriteLine($"L_Rot_Ring_base_x: {sampleData.L_Rot_Ring_base_x}");
            Console.WriteLine($"L_Rot_Ring_base_y: {sampleData.L_Rot_Ring_base_y}");
            Console.WriteLine($"L_Rot_Ring_base_z: {sampleData.L_Rot_Ring_base_z}");
            Console.WriteLine($"L_Pingky_flexion: {sampleData.L_Pingky_flexion}");
            Console.WriteLine($"L_Rot_Pingky_tip_w: {sampleData.L_Rot_Pingky_tip_w}");
            Console.WriteLine($"L_Rot_Pingky_tip_x: {sampleData.L_Rot_Pingky_tip_x}");
            Console.WriteLine($"L_Rot_Pingky_tip_y: {sampleData.L_Rot_Pingky_tip_y}");
            Console.WriteLine($"L_Rot_Pingky_tip_z: {sampleData.L_Rot_Pingky_tip_z}");
            Console.WriteLine($"L_Rot_Pingky_jt2_w: {sampleData.L_Rot_Pingky_jt2_w}");
            Console.WriteLine($"L_Rot_Pingky_jt2_x: {sampleData.L_Rot_Pingky_jt2_x}");
            Console.WriteLine($"L_Rot_Pingky_jt2_y: {sampleData.L_Rot_Pingky_jt2_y}");
            Console.WriteLine($"L_Rot_Pingky_jt2_z: {sampleData.L_Rot_Pingky_jt2_z}");
            Console.WriteLine($"L_Rot_Pingky_jt1_w: {sampleData.L_Rot_Pingky_jt1_w}");
            Console.WriteLine($"L_Rot_Pingky_jt1_x: {sampleData.L_Rot_Pingky_jt1_x}");
            Console.WriteLine($"L_Rot_Pingky_jt1_y: {sampleData.L_Rot_Pingky_jt1_y}");
            Console.WriteLine($"L_Rot_Pingky_jt1_z: {sampleData.L_Rot_Pingky_jt1_z}");
            Console.WriteLine($"L_Rot_Pingky_base_w: {sampleData.L_Rot_Pingky_base_w}");
            Console.WriteLine($"L_Rot_Pingky_base_x: {sampleData.L_Rot_Pingky_base_x}");
            Console.WriteLine($"L_Rot_Pingky_base_y: {sampleData.L_Rot_Pingky_base_y}");
            Console.WriteLine($"L_Rot_Pingky_base_z: {sampleData.L_Rot_Pingky_base_z}");
            Console.WriteLine($"\n\nActual Label: {sampleData.Label} \nPredicted Label value {predictionResult.Prediction} \nPredicted Label scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
